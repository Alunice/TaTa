class CBUSE_UB_WORLD_MATRIX_IDX{
	float4x4	u_mtxWV;
	float4x4	u_mtxVP;
	float4x4	u_mtxWP;
	float4x4	u_mtxVW;
	float4x4	u_mtxPV;
	float4x4	u_mtxPW;
	float4x4	u_mtxWVOld;
	float4x4	u_mtxVPOld;
	float4x4	u_mtxWPOld;
}
class CBUSE_UB_MODEL_MATERIAL_IDX{
	float2	u_symFlag;
	int	u_meshId;
	float	u_alphaTestRef;
	float4	u_diffuse;
	float4	u_ambient;
	float4	u_speculer;
	float2x3	u_texProj;
	float4	u_uvRange;
}
class CBUSE_UB_SHADER_PARAM_IDX{
	float4	u_shaderParam0;
	float4	u_shaderParam1;
	float4	u_shaderParam2;
	float4	u_shaderParam3;
	float4	u_shaderParam4;
	float4	u_shaderParam5;
	float4	u_shaderParam6;
	float4	u_shaderParam7;
}
class CBUSE_UB_CAMERA_IDX{
	float3	u_eyePos;
	float3	u_eyeDir;
	float3	u_eyeUpDir;
	float4	u_depthLinear;
	float4	u_eyeNearFarInvAspect;
	float3x4	u_mtxEyeSphere;
	float4	u_shadowSampleParams;
	float4	u_pointLightRWParam;
	float3	u_RayleighColorP20;
	float3	u_RayleighColorP10;
	float3	u_RayleighColorO00;
	float3	u_RayleighColorM10;
	float3	u_RayleighColorM20;
	float3	u_HeightRayleighColor;
	float3	u_MieColorP20;
	float3	u_MieColorO00;
	float3	u_MieColorM20;
	float4	u_fogWorldParam0;
	float4	u_fogWorldParam1;
	float4	u_fogHeightParam0;
	float4	u_fogHeightParam1;
}
class CBUSE_UB_CHARA_LIGHT_IDX{
	float4	u_charaAmbient;
	float4	u_charaHighLightColor;
	float4	u_charaShadowColor;
	float4	u_charaLightDir;
	float4	u_depthEdgeParam;
	float4	u_occlusionParam;
	float4	u_charaShadowBias;
	float4	u_charaShadowParam;
	float4	u_charaUnderRimColor;
	float4	u_charaBlendRateParam;
	float4	u_charaRimOutline;
	float4	u_pointLightToonParam;
	float4	u_pointLightBlendParam;
	float4	u_charaAmbLightParam;
	float3	u_lightProb1;
	float3	u_lightProb2;
	float3	u_lightProb3;
	float3	u_lightProb4;
	float3	u_lightProb5;
	float3	u_lightProb6;
	float3	u_lightProb7;
	float3	u_lightProb8;
	float3	u_lightProb9;
	float3	u_charaStatusColor;
	float4	u_charaStatusRimColor;
	float4	u_charaStatusPowInOutDis;
	float3	u_charaStatusUvCenter;
	float4	u_charaStatusUvSclMove;
	float4x4	u_charaSelfShadowMtxWP;
	float4	u_charaSelfShadowSampleParams;
	float4	u_charaWaterWetParam;
	float4	u_charaWaterWetDiffClr;
	float4	u_charaWaterWetSpcClr;
	float4	u_charaGrTParam;
	float4	u_charaStatusHitColor;
	float4	u_charaStatusHitParam;
	float4	pointLightRimParam;
}
class CBUSE_UB_POINT_LIGHT_IDX{
	float4	u_lightPosX;
	float4	u_lightPosY;
	float4	u_lightPosZ;
	float4	u_lightColor0;
	float4	u_lightColor1;
	float4	u_lightColor2;
	float4	u_lightColor3;
	float4	u_lightAttenuation;
}
class INPUT {
	SV_Position;
	COLOR;
	TEXCOORD1;
	TEXCOORD2;
	TEXCOORD3;
	TEXCOORD4;
	TEXCOORD5;
	TEXCOORD6;
	TEXCOORD7;
	TEXCOORD8;
	TEXCOORD9;
	TEXCOORD10;
	TEXCOORD11;
}
class OUT {
	SV_Target;
	SV_Target;
	SV_Target;
	SV_Target;
	SV_Target;
}
r0.xyzw = tex2D(in_tex0, in.TEXCOORD2.xy).xyzw //sample_state in_tex0Sampler;
r1.xyzw = r0.wxyz * CBUSE_UB_MODEL_MATERIAL_IDX.u_diffuse.wxyz;
r2.xy = in.SV_Position.xy * float2(0.0625, 0.0625);
r2.zw = r2.xy >= -r2.xy;
r2.xy = frac(abs(r2.xy));
r2.xy = r2.zw;
r2.xy = r2.xy * float2(16.0, 16.0);
r2.xy = floor(r2.xyxx) //ftoi;
r2.zw = float2(0, 0);
r2.x = tex2D(in_texDither, r2.xy).x //ld_indexable;
r1.x = r1.x >= r2.x;
r1.x = r1.x == 0;
if (r1.x != 0) discard;
r1.x = dot(in.TEXCOORD3.xyzx, in.TEXCOORD3.xyzx);
r1.x = rsqrt(r1.x);
r2.xyz = r1.xxx * in.TEXCOORD3.xyz;
r1.x = dot(in.TEXCOORD4.xyzx, in.TEXCOORD4.xyzx);
r1.x = rsqrt(r1.x);
r3.xyz = r1.xxx * in.TEXCOORD4.xyz;
r4.x = dot(CBUSE_UB_WORLD_MATRIX_IDX.u_mtxWV[0].xyzx, r2.xyzx);
r4.y = dot(CBUSE_UB_WORLD_MATRIX_IDX.u_mtxWV[1].xyzx, r2.xyzx);
r4.z = dot(CBUSE_UB_WORLD_MATRIX_IDX.u_mtxWV[2].xyzx, r2.xyzx);
r5.xyz = tex2D(in_tex1, in.TEXCOORD2.xy).xyz //sample_state in_tex1Sampler;
r6.xy = tex2D(in_texOccl, in.TEXCOORD2.xy).yz //sample_state in_texOcclSampler;
r7.xyz = in.TEXCOORD8.xyz-CBUSE_UB_CAMERA_IDX.u_eyePos.xyz;
r1.x = dot(r7.xyzx, r7.xyzx);
r1.x = rsqrt(r1.x);
r7.xyz = r1.xxx * r7.xyz;
r1.x = saturate(dot(r2.xyzx, -r7.xyzx));
r7.z = dot(r2.xyzx, CBUSE_UB_CHARA_LIGHT_IDX.u_charaLightDir.xyzx);
r3.w = -r1.x + 1.0;
r7.xw = -r7.zz;
r6.zw = saturate(r3.ww * r7.zw);
r4.w = saturate(in.TEXCOORD5.x);
r4.w = CBUSE_UB_CHARA_LIGHT_IDX.u_occlusionParam.y*r4.w + in.TEXCOORD5.y;
r5.w = -r7.z*CBUSE_UB_CHARA_LIGHT_IDX.u_occlusionParam.y + r7.z;
r5.w = r4.w + r5.w;
r8.x = r5.w*0.5 + 0.5;
r5.w = -r8.x + 1.0;
r8.y = r6.x*r5.w + r8.x;
r5.w = r7.z*CBUSE_UB_CHARA_LIGHT_IDX.u_occlusionParam.y + r7.x;
r4.w = r4.w + r5.w;
r4.w = r4.w*0.5 + r6.w;
r7.x = -CBUSE_UB_CHARA_LIGHT_IDX.u_charaShadowColor[0].w;
r7.y = -CBUSE_UB_CHARA_LIGHT_IDX.u_charaShadowColor[1].w;
r6.xw = r7.xy + r8.xy;
r5.w = r6.z + r8.x;
r6.xz = saturate(r6.wx + float2(0.5, 0.5));
r5.w = r5.w-CBUSE_UB_CHARA_LIGHT_IDX.u_charaHighLightColor.w;
r5.w = saturate(r5.w * CBUSE_UB_CHARA_LIGHT_IDX.u_charaAmbient.w);
r7.xyzw = in.TEXCOORD9.xyzw/in.TEXCOORD9.wwww;
r8.xyz = in.TEXCOORD10.xyz/in.TEXCOORD10.www;
x0[0].xy = r7.xy;
x0[1].xy = r8.xy;
r9.x = ddx_coarse(r7.z);
r9.y = ddx_coarse(r8.z);
r10.x = ddy_coarse(r7.z);
r10.y = ddy_coarse(r8.z);
r9.xy = max(abs(r9.xy), abs(r10.xy));
r9.xy = r9.xy * CBUSE_UB_CHARA_LIGHT_IDX.u_charaShadowBias.zz;
r9.xy = CBUSE_UB_CHARA_LIGHT_IDX.u_charaShadowBias.xx*float2(0.01, 0.01) + r9.xy;
r9.xy = min(r9.xy, CBUSE_UB_CHARA_LIGHT_IDX.u_charaShadowBias.yy);
r8.w = r7.z;
r8.zw = r8.wz-r9.xy;
r9.xz = min(r8.zw, float2(1.0, 1.0));
x0[0].z = r9.x;
x0[1].z = r9.z;
r9.yw = r7.xy;
x1[0].xyz = r9.ywx;
r9.xy = r8.xy;
x1[1].xyz = r9.xyz;
x1[2].xyz = r9.xyz;
r7.xz = float2(0, 0);
while(true) {
	r8.x = r7.x < 2;
	r8.y = r7.z == 0;
	r8.x = r8.y & r8.x ;
	if (r8.x == 0) break;
	r8.x = x1[r7.x + 0].x;
	r8.y = x1[r7.x + 0].y;
	r8.z = min(r8.y, r8.x);
	r8.x = max(r8.y, r8.x);
	r8.y = 0.000977 < r8.z;
	r8.x = r8.x < 0.999023;
	r8.x = r8.x & r8.y ;
	r7.z = r8.x & 1 ;
	r7.x = r7.x + 1;
}
r7.z = r7.x*r7.z-1;
r8.w = r7.z // itof;
r7.z = r8.w >= 0.0;
if (r7.z != 0) {
	r7.z = r7.x-1;
	r8.xyz = x1[r7.z + 0].xyz;
	r9.xyzw = CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zwzw*float4(-1.0, -1.0, 1.0, 1.0) + r8.xyxy;
	r9.x = min(r9.y, r9.x);
	r9.y = max(r9.w, r9.z);
	r9.x = saturate(-r9.x*10.24 + 1.0);
	r9.y = r9.y*1024.0-924.0;
	r9.y = saturate(r9.y * 0.01);
	r9.x = max(r9.y, r9.x);
	r9.y = r8.w >= 1.0;
	r9.z = 0.0 >= r9.x;
	r9.y = r9.z | r9.y;
	if (r9.y != 0) {
		r9.y = tex2D(in_texShadow, r8.xy).x //sample_state in_texShadowSampler;
		r10.xy = r8.xy + CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw;
		r10.z = r8.w;
		r9.z = tex2D(in_texShadow, r10.xy).x //sample_state in_texShadowSampler;
		r9.y = r9.z + r9.y;
		r10.xy = r8.xy-CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw;
		r9.z = tex2D(in_texShadow, r10.xy).x //sample_state in_texShadowSampler;
		r9.y = r9.z + r9.y;
		r10.xy = CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw*float2(1.0, -1.0) + r8.xy;
		r9.z = tex2D(in_texShadow, r10.xy).x //sample_state in_texShadowSampler;
		r9.y = r9.z + r9.y;
		r10.xy = -CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw*float2(1.0, -1.0) + r8.xy;
		r9.z = tex2D(in_texShadow, r10.xy).x //sample_state in_texShadowSampler;
		r9.y = r9.z + r9.y;
		r9.y = r9.y * 0.2;
	} else {
		r7.x = r7.x < 2;
		r7.x = r7.x & 1 ;
		r7.x = r7.z + r7.x;
		r10.xyz = x1[r7.x + 0].xyz;
		r10.w = r7.x // itof;
		r7.x = tex2D(in_texShadow, r8.xy).x //sample_state in_texShadowSampler;
		r7.z = tex2D(in_texShadow, r10.xy).x //sample_state in_texShadowSampler;
		r7.z = -r7.x + r7.z;
		r7.x = r9.x*r7.z + r7.x;
		r11.xy = r8.xy + CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw;
		r12.xy = r10.xy + CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw;
		r11.z = r8.w;
		r7.z = tex2D(in_texShadow, r11.xy).x //sample_state in_texShadowSampler;
		r12.z = r10.w;
		r8.w = tex2D(in_texShadow, r12.xy).x //sample_state in_texShadowSampler;
		r8.w = -r7.z + r8.w;
		r7.z = r9.x*r8.w + r7.z;
		r7.x = r7.z + r7.x;
		r11.xy = r8.xy-CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw;
		r12.xy = r10.xy-CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw;
		r7.z = tex2D(in_texShadow, r11.xy).x //sample_state in_texShadowSampler;
		r8.w = tex2D(in_texShadow, r12.xy).x //sample_state in_texShadowSampler;
		r8.w = -r7.z + r8.w;
		r7.z = r9.x*r8.w + r7.z;
		r7.x = r7.z + r7.x;
		r11.xy = CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw*float2(1.0, -1.0) + r8.xy;
		r12.xy = CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw*float2(1.0, -1.0) + r10.xy;
		r7.z = tex2D(in_texShadow, r11.xy).x //sample_state in_texShadowSampler;
		r8.w = tex2D(in_texShadow, r12.xy).x //sample_state in_texShadowSampler;
		r8.w = -r7.z + r8.w;
		r7.z = r9.x*r8.w + r7.z;
		r7.x = r7.z + r7.x;
		r11.xy = -CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw*float2(1.0, -1.0) + r8.xy;
		r12.xy = -CBUSE_UB_CAMERA_IDX.u_shadowSampleParams.zw*float2(1.0, -1.0) + r10.xy;
		r7.z = tex2D(in_texShadow, r11.xy).x //sample_state in_texShadowSampler;
		r8.x = tex2D(in_texShadow, r12.xy).x //sample_state in_texShadowSampler;
		r8.x = -r7.z + r8.x;
		r7.z = r9.x*r8.x + r7.z;
		r7.x = r7.z + r7.x;
		r9.y = r7.x * 0.2;
	}
} else {
	r9.y = 0;
}
r7.x = r7.w * 0.05;
r7.x = r7.y < r7.x;
r7.zw = r7.xx & float2(1, 0x3f800000) // 0x3f800000=1.0, maybe means: if (r7.xx==0xFFFFFFFF) r7.zw=1.0;
r7.xy = x0[r7.z + 0].xy;
r7.w = tex2D(in_texShadow, r7.xy).x //sample_state in_tex0Sampler;
r7.xy = -r7.xy + float2(0.5, 0.5);
r7.x = abs(r7.y) + abs(r7.x);
r7.x = 0.5 < r7.x;
r7.x = r7.x & 0x3f800000 // 0x3f800000=1.0, maybe means: if (r7.x==0xFFFFFFFF) r7.x=1.0;
r7.y = -r7.w + 1.0;
r7.x = r7.x*r7.y + r7.w;
r7.y = x0[r7.z + 0].z;
r7.x = -r7.x + r7.y;
r7.x = r7.x * CBUSE_UB_CHARA_LIGHT_IDX.u_charaRimOutline.z;
r7.y = r7.x * r9.y;
r7.xy = saturate(r7.xy * float2(1.0, 100.0));
r7.x = r7.x*-r9.y + r9.y;
r7.z = r9.y * CBUSE_UB_CHARA_LIGHT_IDX.u_charaRimOutline.w;
r7.x = max(r7.z, r7.x);
r7.x = -r9.y + r7.x;
r7.x = r7.y*r7.x + r9.y;
r7.y = CBUSE_UB_CHARA_LIGHT_IDX.u_charaRimOutline.z < 0.0;
r7.y = r7.y & 0x3f800000 // 0x3f800000=1.0, maybe means: if (r7.y==0xFFFFFFFF) r7.y=1.0;
r7.y = r9.y * r7.y;
r7.y = saturate(r7.y * 100.0);
r7.z = r9.y*CBUSE_UB_CHARA_LIGHT_IDX.u_charaRimOutline.w-r7.x;
r7.x = r7.y*r7.z + r7.x;
r7.x = r7.x * CBUSE_UB_CHARA_LIGHT_IDX.u_charaShadowParam.x;
r8.xyzw = -in.TEXCOORD8.xxxx + CBUSE_UB_POINT_LIGHT_IDX.u_lightPosX.xyzw;
r9.xyzw = -in.TEXCOORD8.yyyy + CBUSE_UB_POINT_LIGHT_IDX.u_lightPosY.xyzw;
r10.xyzw = -in.TEXCOORD8.zzzz + CBUSE_UB_POINT_LIGHT_IDX.u_lightPosZ.xyzw;
r11.xyzw = r9.xyzw * r9.xyzw;
r11.xyzw = r8.xyzw*r8.xyzw + r11.xyzw;
r11.xyzw = r10.xyzw*r10.xyzw + r11.xyzw;
r9.xyzw = r3.yyyy * r9.xyzw;
r8.xyzw = r8.xyzw*r3.xxxx + r9.xyzw;
r8.xyzw = r10.xyzw*r3.zzzz + r8.xyzw;
r9.xyzw = rsqrt(r11.xyzw);
r10.xyzw = r9.xyzw*r11.xyzw-CBUSE_UB_POINT_LIGHT_IDX.u_lightAttenuation.xyzw;
r10.xyzw = saturate(r10.xyzw/-CBUSE_UB_POINT_LIGHT_IDX.u_lightAttenuation.xyzw);
r10.xyzw = r10.xyzw * r10.xyzw;
r10.xyzw = r10.xyzw * CBUSE_UB_CHARA_LIGHT_IDX.u_pointLightToonParam.yyyy;
r11.xyzw = r8.xyzw*r9.xyzw + float4(1.0, 1.0, 1.0, 1.0);
r11.xyzw = saturate(r11.xyzw-CBUSE_UB_CHARA_LIGHT_IDX.u_pointLightToonParam.xxxx);
r12.xyzw = saturate(r10.xyzw);
r11.xyzw = r11.xyzw * r12.xyzw;
r11.xyzw = r11.xyzw * CBUSE_UB_CHARA_LIGHT_IDX.u_pointLightToonParam.wwww;
r10.xyzw = r10.xyzw * r10.xyzw;
r8.xyzw = saturate(r8.xyzw*r9.xyzw-CBUSE_UB_CHARA_LIGHT_IDX.u_pointLightToonParam.xxxx);
r8.xyzw = saturate(r10.xyzw*r8.xyzw + r11.xyzw);
r3.xyz = r8.xxx * CBUSE_UB_POINT_LIGHT_IDX.u_lightColor0.xyz;
r7.yzw = r8.yyy * CBUSE_UB_POINT_LIGHT_IDX.u_lightColor1.xyz;
r7.yzw = r7.yzw * CBUSE_UB_CHARA_LIGHT_IDX.u_pointLightBlendParam.xxx;
r9.xyz = r8.zzz * CBUSE_UB_POINT_LIGHT_IDX.u_lightColor2.xyz;
r10.xyz = r8.www * CBUSE_UB_POINT_LIGHT_IDX.u_lightColor3.xyz;
r3.xyz = r3.xyz*CBUSE_UB_CHARA_LIGHT_IDX.u_pointLightBlendParam.xxx + r7.yzw;
r3.xyz = r9.xyz*CBUSE_UB_CHARA_LIGHT_IDX.u_pointLightBlendParam.xxx + r3.xyz;
r3.xyz = r10.xyz*CBUSE_UB_CHARA_LIGHT_IDX.u_pointLightBlendParam.xxx + r3.xyz;
r7.y = r8.y + r8.x;
r7.y = r8.z + r7.y;
r7.y = r8.w + r7.y;
r7.z = r7.y * CBUSE_UB_CHARA_LIGHT_IDX.u_pointLightToonParam.z;
r6.w = CBUSE_UB_SHADER_PARAM_IDX.u_shaderParam2.x;
r8.xyzw = tex2D(in_texGrd, r6.zw).xyzw //sample_state in_texGrdSampler;
r6.z = CBUSE_UB_SHADER_PARAM_IDX.u_shaderParam2.y;
r9.xyzw = tex2D(in_texGrd, r6.xz).xyzw //sample_state in_texGrdSampler;
r6.xzw = r8.xyz * CBUSE_UB_CHARA_LIGHT_IDX.u_charaShadowColor[0].xyz;
r8.xyz = r9.xyz*CBUSE_UB_CHARA_LIGHT_IDX.u_charaShadowColor[1].xyz-r6.xzw;
r6.xzw = r9.www*r8.xyz + r6.xzw;
r7.w = dot(r1.yzwy, float4(0.29891, 0.58661, 0.11448, 0.0));
r8.x = r7.w * CBUSE_UB_CHARA_LIGHT_IDX.u_charaBlendRateParam.z;
r9.xyz = r3.xyz * r8.xxx;
r10.xyz = r7.www*CBUSE_UB_CHARA_LIGHT_IDX.u_charaBlendRateParam.www + CBUSE_UB_CHARA_LIGHT_IDX.u_charaAmbient.xyz;
r11.xyz = -r0.xyz*CBUSE_UB_MODEL_MATERIAL_IDX.u_diffuse.xyz + r10.xyz;
r1.yzw = CBUSE_UB_CHARA_LIGHT_IDX.u_charaAmbLightParam.xxx*r11.xyz + r1.yzw;
r10.xyz = r10.xyz + float3(-1.0, -1.0, -1.0);
r10.xyz = CBUSE_UB_CHARA_LIGHT_IDX.u_charaAmbLightParam.yyy*r10.xyz + float3(1.0, 1.0, 1.0);
r11.xyz = r1.yzw * r10.xyz;
r7.x = max(r7.x, r8.w);
r6.xzw = r7.www*CBUSE_UB_CHARA_LIGHT_IDX.u_charaBlendRateParam.www + r6.xzw;
r8.y = in.TEXCOORD12.x * 64.0;
r8.z = floor(r8.y) //round_ni;
r8.z = floor(r8.z) //ftou;
r8.w = r8.z + 1;
r8.w = min(r8.w, 64);
r8.y = frac(r8.y);
r8.z = tex2D(ro_waterWetBuffer, r8.z+0) //ld_structured;
r8.w = tex2D(ro_waterWetBuffer, r8.w+0) //ld_structured;
r8.w = -r8.z + r8.w;
r8.y = saturate(r8.y*r8.w + r8.z);
r8.z = saturate(in.COLOR.y * 100000.0);
r12.xy = saturate(-CBUSE_UB_SHADER_PARAM_IDX.u_shaderParam2.zw + float2(1.0, 1.0));
r8.z = r8.z * r12.x;
r8.zw = r8.zz * CBUSE_UB_CHARA_LIGHT_IDX.u_charaWaterWetParam.xy;
r12.xzw = r6.xzw + float3(-1.0, -1.0, -1.0);
r13.xyz = r8.zzz*r12.xzw + float3(1.0, 1.0, 1.0);
r13.xyz = r11.xyz*r13.xyz + float3(-1.0, -1.0, -1.0);
r13.xyz = r8.www*r13.xyz + float3(1.0, 1.0, 1.0);
r2.w = 1.0;
r14.x = dot(CBUSE_UB_CAMERA_IDX.u_mtxEyeSphere[0].xyzw, r2.xyzw);
r14.y = dot(CBUSE_UB_CAMERA_IDX.u_mtxEyeSphere[1].xyzw, r2.xyzw);
r2.xyz = tex2D(in_texWaterWet, r14.xy).xyz //sample_state in_texWaterWetSampler;
r2.xyz = r2.xyz * r2.xyz;
r2.xyz = r2.xyz * CBUSE_UB_CHARA_LIGHT_IDX.u_charaWaterWetSpcClr.xyz;
r2.xyz = r12.yyy * r2.xyz;
r2.xyz = r11.xyz*r13.xyz + r2.xyz;
r1.yzw = -r1.yzw*r10.xyz + r2.xyz;
r1.yzw = r8.yyy*r1.yzw + r11.xyz;
r2.xy = r7.xx * CBUSE_UB_CHARA_LIGHT_IDX.u_charaShadowParam.zw;
r6.xzw = -r1.yzw + r6.xzw;
r1.yzw = r2.xxx*r6.xzw + r1.yzw;
r2.xyz = r2.yyy*r12.xzw + float3(1.0, 1.0, 1.0);
r1.yzw = r1.yzw * r2.xyz;
r2.x = r7.w*CBUSE_UB_CHARA_LIGHT_IDX.u_charaBlendRateParam.z + r6.y;
r2.x = min(r2.x, 1.0);
r0.xyz = r0.xyz*CBUSE_UB_MODEL_MATERIAL_IDX.u_diffuse.xyz-r1.yzw;
r0.xyz = r2.xxx*r0.xyz + r1.yzw;
r1.y = r7.z * CBUSE_UB_CHARA_LIGHT_IDX.u_pointLightBlendParam.y;
r2.xyz = r3.xyz*r8.xxx-r0.xyz;
r0.xyz = r1.yyy*r2.xyz + r0.xyz;
r1.y = r4.w + 0.5;
r1.y = r1.y-CBUSE_UB_CHARA_LIGHT_IDX.u_charaUnderRimColor.w;
r1.y = saturate(r1.y * CBUSE_UB_CHARA_LIGHT_IDX.u_charaBlendRateParam.y);
r1.z = r3.w * r3.w;
r1.z = saturate(r1.z * CBUSE_UB_CHARA_LIGHT_IDX.pointLightRimParam.x);
r1.z = r7.y * r1.z;
r1.z = 0.3 < r1.z;
r1.z = r1.z & 0x3f800000 // 0x3f800000=1.0, maybe means: if (r1.z==0xFFFFFFFF) r1.z=1.0;
r2.xyz = saturate(r9.xyz * CBUSE_UB_CHARA_LIGHT_IDX.pointLightRimParam.yyy);
r3.xyz = CBUSE_UB_CHARA_LIGHT_IDX.u_charaHighLightColor.xyz*r5.www + r9.xyz;
r2.xyz = r2.xyz*r1.zzz + r3.xyz;
r1.yzw = CBUSE_UB_CHARA_LIGHT_IDX.u_charaUnderRimColor.xyz*r1.yyy + r2.xyz;
r2.xyz = r0.xyz * r1.yzw;
r1.yzw = -r2.xyz*CBUSE_UB_CHARA_LIGHT_IDX.u_charaBlendRateParam.xxx + r1.yzw;
r0.xyz = r0.xyz + r1.yzw;
r1.y = 1.0 + CBUSE_UB_MODEL_MATERIAL_IDX.u_ambient.x;
r1.z = -CBUSE_UB_CHARA_LIGHT_IDX.u_depthEdgeParam.y + CBUSE_UB_CHARA_LIGHT_IDX.u_depthEdgeParam.x;
r1.z = r1.x*r1.z + CBUSE_UB_CHARA_LIGHT_IDX.u_depthEdgeParam.y;
r1.z = r1.z + in.TEXCOORD2.w;
r1.w = CBUSE_UB_CHARA_LIGHT_IDX.u_charaShadowParam.w + CBUSE_UB_CHARA_LIGHT_IDX.u_charaShadowParam.z;
r1.w = saturate(r1.w * r7.x);
r1.z = saturate(r1.z * CBUSE_UB_CHARA_LIGHT_IDX.u_depthEdgeParam.z);
r2.xyz = tex2D(in_tex2, r14.xy).xyz //sample_state in_tex2Sampler;
r3.xyz = tex2D(in_tex3, in.TEXCOORD2.xy).xyz //sample_state in_tex3Sampler;
r1.w = -r1.w + 1.0;
r3.xyz = r1.www * r3.xyz;
r2.xyz = r2.xyz * r3.xyz;
r0.xyz = r0.xyz*r1.yyy + r2.xyz;
r2.xy = in.TEXCOORD7.xy/in.TEXCOORD7.ww;
r2.z = -r2.y + 1.0;
r1.y = tex2D(in_texScatterOccl, r2.xz).x //sample_state in_texScatterOcclSampler;
r1.y = saturate(r1.y + CBUSE_UB_CAMERA_IDX.u_fogWorldParam1.y);
r3.xyz = r1.yyy * in.TEXCOORD11.xyz;
out.SV_Target.xyz = r0.xyz*in.TEXCOORD11.www + r3.xyz;
r0.xy = in.TEXCOORD6.xy/in.TEXCOORD6.ww;
out.SV_Target.xy = -r0.xy + r2.xy;
r0.x = r1.z * CBUSE_UB_CHARA_LIGHT_IDX.u_depthEdgeParam.w;
r0.yz = r5.xy + float2(-0.5, -0.5);
r2.xy = saturate(r0.yz * float2(256.0, 256.0));
r0.y = r5.z * in.COLOR.z;
r2.z = saturate(r0.x * r0.y);
r0.x = dot(r4.xyzx, r4.xyzx);
r0.x = rsqrt(r0.x);
r0.xyz = r0.xxx * r4.xyz;
out.SV_Target.xyz = r0.xyz*float3(0.5, 0.5, 0.5) + float3(0.5, 0.5, 0.5);
out.SV_Target.w = r0.w;
out.SV_Target.z = 0;
out.SV_Target.w = in.SV_Position.z;
out.SV_Target.xz = in.COLOR.yx;
out.SV_Target.y = r2.x;
out.SV_Target.w = r1.x;
out.SV_Target.xy = r2.yz;
out.SV_Target.z = 0.027451;
out.SV_Target.w = in.TEXCOORD2.w;
out.SV_Target.w = 0;
return;