//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.0
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float4 _vc0_h[7];                  // Offset:   16 Size:   112
//   float4 _vc1_m;                     // Offset:  128 Size:    16 [unused]
//   float4 _vc1_h[4];                  // Offset:  144 Size:    64
//   float4 _vc2_h[5];                  // Offset:  208 Size:    80
//   float4 _vc3_m[2];                  // Offset:  288 Size:    32
//   float4 _vc4_m;                     // Offset:  320 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// $Globals                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 1   xyz         1     NONE   float       
// TEXCOORD                 2   xyzw        2     NONE   float       
// TEXCOORD                 3   xy          3     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 4   xyzw        1     NONE   float   xyzw
// TEXCOORD                 5   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 1   xyzw        4     NONE   float   xyzw
// TEXCOORD                 2   xyzw        5     NONE   float   xyzw
// TEXCOORD                 3   xyzw        6     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[21], immediateIndexed
dcl_input v0.xyz
dcl_input v3.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_temps 8
dcl_indexableTemp x0[1], 4
dcl_indexableTemp x1[1], 4
dcl_indexableTemp x2[1], 4
dcl_indexableTemp x3[2], 4
dcl_indexableTemp x4[2], 4
mov r0.xyz, v0.xyzx
mov r1.xy, v3.xyxx
mov r0.xyz, r0.xyzx
mov r1.xy, r1.xyxx
mov r2.xyz, cb0[7].xyzx
mov r0.w, cb0[5].z
mul r3.xyz, r0.xxxx, cb0[9].xyzx
mul r4.xyz, r0.yyyy, cb0[10].xyzx
add r3.xyz, r3.xyzx, r4.xyzx
mul r0.xyz, r0.zzzz, cb0[11].xyzx
add r0.xyz, r0.xyzx, r3.xyzx
add r3.xyz, r2.xyzx, cb0[12].xyzx
add r0.xyz, r0.xyzx, r3.xyzx
mov x0[0].xy, r1.xyxx
mov r1.xyz, l(0,0,0,0)
add r1.xyz, r0.xyzx, r1.xyzx
mul r3.xyzw, r1.zzzz, cb0[3].xyzw
mul r4.xyzw, r1.yyyy, cb0[2].xyzw
mul r5.xyzw, r1.xxxx, cb0[1].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
add r3.xyzw, r3.xyzw, cb0[4].xyzw
mov r1.xyz, r1.xyzx
mov r4.xyz, -cb0[6].xyzx
add r4.xyz, r1.zxyz, r4.zxyz
mov r0.z, cb0[14].w
mov r0.z, r0.z
dp3 r2.z, r4.xyzx, r4.xyzx
rsq r5.xyz, r2.zzzz
mul r2.z, r2.z, r5.z
mov r5.xyz, r5.xyzx
mov r5.xyz, r5.xyzx
mul r5.xyw, r4.yzyx, r5.xyxz
mov r5.xyw, r5.xyxw
mov r4.z, cb0[13].x
mov r4.y, r2.z
mov r4.x, r4.x
max r2.z, l(0.000000), cb0[13].w
lt r2.w, l(0.000000), r2.z
if_nz r2.w
  mul r2.z, r5.z, r2.z
  mul r2.w, r4.x, r2.z
  mov r2.z, -r2.z
  add r2.z, r2.z, l(1.000000)
  mul r6.y, r4.y, r2.z
  mov r2.z, -r2.w
  add r6.x, r2.z, r4.x
  add r0.w, r0.w, r2.w
  mov r2.z, -cb0[15].y
  add r0.w, r0.w, r2.z
  mul r0.w, r0.w, cb0[13].y
  max r0.w, r0.w, l(-127.000000)
  mov r0.w, -r0.w
  exp r0.w, r0.w
  mul r6.z, r0.w, cb0[15].x
else 
  mov r6.xyz, r4.xyzx
endif 
mul r0.w, r6.x, cb0[13].y
max r0.w, r0.w, l(-127.000000)
mov r2.z, -r0.w
exp r2.z, r2.z
mov r2.z, -r2.z
add r2.z, r2.z, l(1.000000)
div r2.z, r2.z, r0.w
mul r2.w, r0.w, l(0.240227)
mov r2.w, -r2.w
add r2.w, r2.w, l(0.693147)
mov r4.x, -r0.w
max r0.w, r0.w, r4.x
lt r0.w, l(0.010000), r0.w
if_nz r0.w
  mov r2.w, r2.z
else 
  mov r2.w, r2.w
endif 
mov r2.w, r2.w
mul r0.w, r2.w, r6.z
mul r2.z, r6.y, r0.w
mov r4.xzw, cb0[14].xxyz
mov r4.xzw, r4.xxzw
mov r6.xzw, l(0,0,0,0)
ge r2.w, cb0[16].w, l(0.000000)
eq r5.z, l(0.000000), cb0[15].z
and r2.w, r2.w, r5.z
if_nz r2.w
  mov r5.xyw, r5.xyxw
  mov r2.w, -cb0[16].w
  add r2.w, r2.w, r6.y
  max r2.w, r2.w, l(0.000000)
  mul r0.w, r0.w, r2.w
  mov r0.w, -r0.w
  exp r0.w, r0.w
  max r0.w, r0.w, l(0.000000)
  min r0.w, r0.w, l(1.000000)
  dp3 r2.w, r5.xywx, cb0[16].xyzx
  max r2.w, r2.w, l(0.000000)
  min r2.w, r2.w, l(1.000000)
  log r2.w, r2.w
  mul r2.w, r2.w, cb0[17].w
  exp r5.xyz, r2.wwww
  mov r5.xyz, r5.xyzx
  mul r5.xyz, r5.xyzx, cb0[17].xyzx
  mov r0.w, -r0.w
  add r7.xyz, r0.wwww, l(1.000000, 1.000000, 1.000000, 0.000000)
  mov r7.xyz, r7.xyzx
  mul r6.xzw, r5.xxyz, r7.xxyz
endif 
mov r0.z, r0.z
mov r0.w, -r2.z
exp r0.w, r0.w
max r0.w, r0.w, l(0.000000)
min r0.w, r0.w, l(1.000000)
max r5.w, r0.z, r0.w
mov r5.w, r5.w
lt r0.z, l(0.000000), cb0[15].w
lt r0.w, cb0[15].w, r4.y
and r0.z, r0.w, r0.z
if_nz r0.z
  mov r5.w, l(1.000000)
  mov r6.xzw, l(0,0,0,0)
endif 
mov r0.z, -r5.w
add r7.xyz, r0.zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
mov r7.xyz, r7.xyzx
mul r4.xyz, r4.xzwx, r7.xyzx
add r5.xyz, r6.xzwx, r4.xyzx
mov r5.w, r5.w
mov r4.xyzw, cb0[19].xyzw
mov r4.xyzw, r4.xyzw
mov r0.zw, x0[0].xxxy
mov x1[0].xy, r0.zwzz
mov r0.zw, x1[0].xxxy
mov x2[0].xy, r0.zwzz
mov r0.zw, cb0[20].xxxy
mov r2.zw, -r2.xxxy
add r2.zw, r0.xxxy, r2.zzzw
mov r0.zw, -r0.zzzw
add r0.zw, r0.zzzw, r2.zzzw
mov x2[0].zw, r0.zzzw
mov r6.xyzw, x2[0].xyzw
mov x3[0].xyzw, r6.xyzw
mov r0.z, cb0[18].y
mov r2.zw, -r2.xxxy
add r2.zw, r0.xxxy, r2.zzzw
div r0.zw, r2.zzzw, r0.zzzz
mov x3[1].xy, r0.zwzz
mov r6.xyzw, x3[0].xyzw
mov x4[0].xyzw, r6.xyzw
mov r0.zw, x3[1].xxxy
mov x4[1].xy, r0.zwzz
mov r0.zw, -r2.xxxy
add r0.xy, r0.zwzz, r0.xyxx
mov r0.zw, -r4.xxxy
add r0.xy, r0.zwzz, r0.xyxx
mov r0.zw, -r4.xxxy
add r0.zw, r0.zzzw, r4.zzzw
div r0.xy, r0.xyxx, r0.zwzz
mov x4[1].zw, r0.xxxy
mov r1.w, r3.w
mov r3.xyzw, r3.xyzw
mov r0.xyzw, x4[0].xyzw
mov r2.xyzw, x4[1].xyzw
mov r5.xyz, r5.xyzx
mov r5.w, r5.w
mov r1.xyz, r1.xyzx
mov r1.w, r1.w
mov r3.xyzw, r3.xyzw
mov r3.y, -r3.y
mul r4.x, r3.z, l(2.000000)
mov r4.y, -r3.w
add r3.z, r4.y, r4.x
mov r3.xw, r3.xxxw
mov r3.y, r3.y
mov r3.z, r3.z
mov r3.xyzw, r3.xyzw
mov r3.xyzw, r3.xyzw
mov r4.x, r3.x
mov r4.y, -r3.y
add r6.x, r3.w, r3.z
mul r4.z, r6.x, l(0.500000)
mov r4.w, r3.w
mov r3.xyzw, r3.xyzw
mov r0.xyzw, r0.xyzw
mov r2.xyzw, r2.xyzw
mov r5.xyzw, r5.xyzw
mov r1.xyzw, r1.xyzw
mov r4.x, r4.x
mov r4.y, r4.y
mov r4.z, r4.z
mov r4.w, r4.w
mov r3.xyzw, r3.xyzw
mov r3.xyzw, r3.xyzw
mov r0.xyzw, r0.xyzw
mov r2.xyzw, r2.xyzw
mov r5.xyzw, r5.xyzw
mov r1.xyzw, r1.xyzw
mov o0.xyzw, r4.xyzw
mov o1.xyzw, r3.xyzw
mov o2.xyzw, r3.xyzw
mov o3.xyzw, r0.xyzw
mov o4.xyzw, r2.xyzw
mov o5.xyzw, r5.xyzw
mov o6.xyzw, r1.xyzw
ret 
// Approximately 205 instruction slots used
